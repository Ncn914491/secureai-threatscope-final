# Example .env file for SecureAI ThreatScope
# Copy this to .env and fill in your actual values.
# Do NOT commit the .env file with sensitive credentials to version control.

# Google Cloud Project Configuration
GCP_PROJECT_ID="your-gcp-project-id"
GCP_REGION="your-gcp-region"  # e.g., us-central1

# Google Cloud Storage Configuration
GCS_BUCKET_NAME="your-gcs-bucket-name-for-history"

# Firebase Admin SDK Configuration
# If GOOGLE_APPLICATION_CREDENTIALS is set in your environment and points to your
# service account key JSON, firebase-admin will pick it up automatically.
# Otherwise, the application (auth.py) attempts to load a specific path.
# It's recommended to use GOOGLE_APPLICATION_CREDENTIALS.
# GOOGLE_APPLICATION_CREDENTIALS="/path/to/your/serviceAccountKey.json"

# Note on Firebase Authentication in auth.py:
# The current email/password login mechanism in auth.py using the Admin SDK
# is a placeholder and NOT secure for production end-user authentication.
# For a production app, you should implement Firebase client-side (e.g., JavaScript)
# authentication and then verify the ID token on the server (Streamlit backend).
# This .env file does not directly configure Firebase user credentials.
# User management would be handled through the Firebase console or Firebase Admin SDK for user management tasks.

# Streamlit specific configurations (if any)
# STREAMLIT_SERVER_PORT=8501
# STREAMLIT_SERVER_ADDRESS=0.0.0.0
